-- SUGGESTED TEMPLATING (REVIEW CAREFULLY):
-- This file contains suggested changes for multi-environment deployment
-- ⚠️  MANUAL REVIEW REQUIRED before using
-- Applied 12 safe suggestions

-- Exported from PLATFORM_SIT at 20250829161026
-- Environment references templated for multi-environment deployment
-- NOTE: Only current database references are templated, cross-database references remain as-is
create or replace TABLE ACQUIRE_ADVERITY_MAPPING (
	TABLE_SCHEMA VARCHAR(16777216),
	TABLE_NAME VARCHAR(16777216),
	COLUMN_NAME VARCHAR(16777216),
	DATA_TYPE VARCHAR(16777216),
	COLUMN_DEFAULT VARCHAR(16777216),
	CHARACTER_MAXIMUM_LENGTH NUMBER(38,0),
	CHARACTER_OCTET_LENGTH NUMBER(38,0),
	NUMERIC_PRECISION NUMBER(38,0),
	NUMERIC_SCALE NUMBER(38,0),
	DATETIME_PRECISION NUMBER(38,0)
);
create or replace TABLE ACQUIRE_PLATFORM_MONITORING_EXPECTED (
	CHECK_TYPE VARCHAR(16777216) NOT NULL,
	STATUS VARCHAR(16777216) NOT NULL,
	SOURCE_NAME VARCHAR(16777216) NOT NULL
);
create or replace TABLE ACQUIRE_STAR_SCHEMA (
	DATA_SOURCE VARCHAR(16777216),
	TABLE_NAME VARCHAR(16777216),
	TABLE_TYPE VARCHAR(16777216),
	COLUMN_NAME VARCHAR(16777216),
	ADVERITY_FIELD_NAME VARCHAR(16777216),
	DATA_TYPE VARCHAR(16777216),
	DESCRIPTION VARCHAR(16777216),
	COMMENTS VARCHAR(16777216),
	NUMERIC_SCALE NUMBER(9,0),
	NUMERIC_PRECISION NUMBER(9,0),
	CHARACTER_MAXIMUM_LENGTH NUMBER(9,0),
	CHARACTER_OCTET_LENGTH NUMBER(9,0)
);
create or replace TABLE ACQUIRE_STAR_SCHEMA_BKP (
	DATA_SOURCE VARCHAR(16777216),
	TABLE_NAME VARCHAR(16777216),
	TABLE_TYPE VARCHAR(16777216),
	COLUMN_NAME VARCHAR(16777216),
	ADVERITY_FIELD_NAME VARCHAR(16777216),
	DATA_TYPE VARCHAR(16777216),
	DESCRIPTION VARCHAR(16777216),
	COMMENTS VARCHAR(16777216),
	NUMERIC_SCALE NUMBER(9,0),
	NUMERIC_PRECISION NUMBER(9,0),
	CHARACTER_MAXIMUM_LENGTH NUMBER(9,0),
	CHARACTER_OCTET_LENGTH NUMBER(9,0)
);
create or replace TABLE ACQUIRE_STAR_SCHEMA_OLD (
	DATA_SOURCE VARCHAR(16777216),
	TABLE_NAME VARCHAR(16777216),
	TABLE_TYPE VARCHAR(16777216),
	COLUMN_NAME VARCHAR(16777216),
	ADVERITY_FIELD_NAME VARCHAR(16777216),
	DATA_TYPE VARCHAR(16777216),
	DESCRIPTION VARCHAR(16777216),
	COMMENTS VARCHAR(16777216)
);
create or replace TABLE ACQUIRE_STAR_SCHEMA_TMP (
	DATA_SOURCE VARCHAR(16777216),
	TABLE_NAME VARCHAR(16777216),
	TABLE_TYPE VARCHAR(16777216),
	COLUMN_NAME VARCHAR(16777216),
	ADVERITY_FIELD_NAME VARCHAR(16777216),
	DATA_TYPE VARCHAR(16777216),
	DESCRIPTION VARCHAR(16777216),
	COMMENTS VARCHAR(16777216),
	NUMERIC_SCALE NUMBER(9,0),
	NUMERIC_PRECISION NUMBER(9,0),
	CHARACTER_MAXIMUM_LENGTH NUMBER(9,0),
	CHARACTER_OCTET_LENGTH NUMBER(9,0)
);
create or replace TABLE ARCH_ENTITY_CLIENT (
	CLIENT_ID NUMBER(38,0),
	CLIENT_NAME VARCHAR(16777216),
	CLIENT_UUID VARCHAR(16777216),
	AGENCIES ARRAY,
	MARKETS ARRAY
);
create or replace TABLE ARCH_ENTITY_CLIENTCODE (
	CLIENT_ID NUMBER(38,0),
	CLIENT_CODE VARCHAR(16777216)
);
create or replace TABLE ARCH_ENTITY_MARKET (
	ISO_CODE VARCHAR(16777216),
	NAME VARCHAR(16777216),
	REGION_CODE VARCHAR(16777216),
	REGION_NAME VARCHAR(16777216),
	CURRENCY_CODE VARCHAR(16777216),
	CURRENCY_NAME VARCHAR(16777216),
	TIMEZONE VARCHAR(16777216),
	OFFSET VARCHAR(16777216)
);
create or replace TABLE ARCH_MAPPING_CLIENTTYPE (
	CLIENT_ID NUMBER(38,0),
	CLIENT_NAME VARCHAR(16777216),
	TYPE_ID NUMBER(38,0),
	SNOWFLAKE_ACCOUNT_ID VARCHAR(16777216)
);
create or replace TABLE DP_ADVERITY_MAPPING (
	ID NUMBER(38,0),
	DP_NAME VARCHAR(16777216),
	DP_SHORT_NAME VARCHAR(16777216),
	ADVERITY_NAME VARCHAR(16777216),
	ADVERITY_WORKSPACE VARCHAR(16777216),
	BILLING_OBJECTS VARCHAR(16777216),
	ADVERITY_NAME_ID NUMBER(38,0),
	WORKSPACE_ID NUMBER(38,0)
);
create or replace TABLE DP_DATASOURCE (
	ID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(16777216) NOT NULL,
	SHORT_NAME VARCHAR(16777216) NOT NULL,
	SCHEMA VARCHAR(16777216) NOT NULL,
	CATEGORY_ID NUMBER(38,0) NOT NULL,
	STATUS_ID NUMBER(38,0) NOT NULL,
	CLIENT_MAPPING_COLUMN VARCHAR(16777216) NOT NULL,
	ONBOARDING_COLUMN VARCHAR(16777216) NOT NULL,
	INTEGRATION_METHOD_ID VARCHAR(16777216) NOT NULL,
	LOOKBACK_PERIOD NUMBER(38,0),
	DESCRIPTION VARCHAR(16777216),
	IS_AGGREGATOR BOOLEAN
);
create or replace TABLE DP_DBYSNC_RAW_VC_SCHEMA (
	SCHEMA_NAME VARCHAR(512),
	CREATED_TIME TIMESTAMP_NTZ(9)
);
create or replace TABLE DP_DIMENSIONMAPPING (
	ID NUMBER(38,0) NOT NULL,
	DATA_SOURCE_ID NUMBER(38,0) NOT NULL,
	DATABASE_NAME VARCHAR(255) NOT NULL,
	SCHEMA_NAME VARCHAR(255) NOT NULL,
	TABLE_NAME VARCHAR(255) NOT NULL,
	SOURCE_DIMENSION_NAME VARCHAR(255) NOT NULL,
	DP_DIMENSION_NAME VARCHAR(255) NOT NULL,
	DIMENSION_COLUMN_ID VARCHAR(255) NOT NULL,
	DIMENSION_COLUMN_NAME VARCHAR(255),
	DIMENSION_COLUMN_START_DATE VARCHAR(255),
	ISTAXONOMY BOOLEAN NOT NULL DEFAULT FALSE,
	DIMENSION_COLUMN_END_DATE VARCHAR(255),
	PARENT_START_END_DATE_DIMENSION_ID NUMBER(38,0)
);
create or replace TABLE DP_DIMENSIONMAPPING_TESTING (
	ID NUMBER(38,0) NOT NULL,
	DATA_SOURCE_ID NUMBER(38,0) NOT NULL,
	DATABASE_NAME VARCHAR(255) NOT NULL,
	SCHEMA_NAME VARCHAR(255) NOT NULL,
	TABLE_NAME VARCHAR(255) NOT NULL,
	SOURCE_DIMENSION_NAME VARCHAR(255) NOT NULL,
	DP_DIMENSION_NAME VARCHAR(255) NOT NULL,
	DIMENSION_COLUMN_ID VARCHAR(255) NOT NULL,
	DIMENSION_COLUMN_NAME VARCHAR(255),
	DIMENSION_COLUMN_START_DATE VARCHAR(255),
	ISTAXONOMY BOOLEAN NOT NULL DEFAULT FALSE,
	DIMENSION_COLUMN_END_DATE VARCHAR(255),
	PARENT_DIMENSION_ID NUMBER(38,0),
	INHERIT_DATES_FROM_PARENT BOOLEAN DEFAULT TRUE,
	DIMENSION_HIERARCHY_LEVEL NUMBER(38,0) DEFAULT 1
);
create or replace TABLE DP_MARKET (
	CORE_ISO_CODE VARCHAR(16777216),
	CORE_NAME VARCHAR(16777216),
	CORE_REGION_CODE VARCHAR(16777216),
	CORE_REGION_NAME VARCHAR(16777216),
	CORE_CURRENCY_CODE VARCHAR(16777216),
	CORE_CURRENCY_NAME VARCHAR(16777216),
	CORE_TIMEZONE VARCHAR(16777216),
	CORE_OFFSET VARCHAR(16777216),
	DP_REGION_CODE VARCHAR(16777216),
	DP_REGION_NAME VARCHAR(16777216),
	DP_MARKET_HUB_CODE VARCHAR(16777216),
	DP_DEFAULT_TIMEZONE VARCHAR(16777216),
	DP_DEFAULT_OFFSET VARCHAR(16777216)
);
create or replace TABLE DP_QUALITY (
	DATA_SOURCE_ID NUMBER(38,0) NOT NULL,
	EXPECTED_DATA_RECENCY VARCHAR(16777216) NOT NULL,
	EXPECTED_DATA_TIMELINESS NUMBER(38,0) NOT NULL,
	COMPLETENESS_SOURCE_TABLE VARCHAR(16777216) NOT NULL,
	ACCURACY_THRESHOLD_IMPRESSIONS NUMBER(38,8) NOT NULL,
	ACCURACY_THRESHOLD_CLICKS NUMBER(38,8) NOT NULL,
	ACCURACY_THRESHOLD_COST NUMBER(38,8) NOT NULL
);
create or replace TABLE ENTITY_ADVERITY_AUTH (
	AUTH_ID VARCHAR(16777216) DEFAULT UUID_STRING(),
	DATA_SOURCE_ID NUMBER(38,0) NOT NULL,
	EMAIL VARCHAR(255) NOT NULL,
	ADVERITY_AUTH_NAME VARCHAR(1024),
	CREATED_TIMESTAMP TIMESTAMP_NTZ(9) NOT NULL,
	UPDATED_TIMESTAMP TIMESTAMP_NTZ(9) NOT NULL
);
create or replace TABLE ENTITY_CLIENT (
	CLIENT_ID NUMBER(38,0) NOT NULL,
	CLIENT_NAME VARCHAR(16777216) NOT NULL,
	CLIENT_UUID VARCHAR(16777216) NOT NULL,
	AGENCIES ARRAY,
	MARKETS ARRAY
);
create or replace TABLE ENTITY_CLIENTCODE (
	CLIENT_ID NUMBER(38,0) NOT NULL,
	CLIENT_CODE VARCHAR(16777216) NOT NULL
);
create or replace TABLE ENTITY_DATASOURCECATEGORY (
	ID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(16777216) NOT NULL
);
create or replace TABLE ENTITY_INTEGRATIONMETHOD (
	ID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(16777216) NOT NULL
);
create or replace TABLE ENTITY_MARKET (
	ISO_CODE VARCHAR(16777216) NOT NULL,
	NAME VARCHAR(16777216) NOT NULL,
	REGION_CODE VARCHAR(16777216) NOT NULL,
	REGION_NAME VARCHAR(16777216) NOT NULL,
	CURRENCY_CODE VARCHAR(16777216) NOT NULL,
	CURRENCY_NAME VARCHAR(16777216) NOT NULL,
	TIMEZONE VARCHAR(16777216) NOT NULL,
	OFFSET VARCHAR(16777216) NOT NULL
);
create or replace TABLE ENTITY_SHARE (
	ID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(16777216) NOT NULL,
	DATABASE_NAME VARCHAR(16777216) NOT NULL,
	SHARE_TYPE_ID NUMBER(38,0) NOT NULL,
	SHARE_PURPOSE_ID NUMBER(38,0) NOT NULL,
	DESCRIPTION VARCHAR(16777216)
);
create or replace TABLE ENTITY_SHAREPURPOSE (
	ID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(16777216) NOT NULL
);
create or replace TABLE ENTITY_SHARETYPE (
	ID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(16777216) NOT NULL,
	DESCRIPTION VARCHAR(16777216)
);
create or replace TABLE ENTITY_SNOWFLAKEACCOUNT (
	ID VARCHAR(16777216) NOT NULL,
	NAME VARCHAR(16777216) NOT NULL,
	TYPE_ID VARCHAR(16777216) NOT NULL,
	DESCRIPTION VARCHAR(16777216),
	REGION VARCHAR(16777216) NOT NULL,
	ISACTIVE BOOLEAN NOT NULL,
	URL VARCHAR(16777216),
	MARKET VARCHAR(16777216) NOT NULL,
	IS_DBROLE_CLIENT_ACCESS_POLICY BOOLEAN NOT NULL DEFAULT TRUE
);
create or replace TABLE ENTITY_STATUS (
	ID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(16777216) NOT NULL
);
create or replace TABLE ENTITY_TYPE (
	ID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(16777216) NOT NULL,
	DP_MARKET VARCHAR(16777216)
);
create or replace TABLE ENTITY_USERCLIENT (
	EMAIL VARCHAR(16777216),
	USERNAME VARCHAR(16777216),
	FIRST_NAME VARCHAR(16777216),
	LAST_NAME VARCHAR(16777216),
	ROLES VARIANT,
	CORE_CLIENT_ID NUMBER(38,0),
	CORE_CLIENT_NAME VARCHAR(16777216),
	DP_CLIENT_CODE VARCHAR(16777216),
	DP_CLIENT_TYPE VARCHAR(16777216),
	CORE_MARKET_CODE VARCHAR(16777216),
	CREATED_TIMESTAMP TIMESTAMP_NTZ(9)
);
create or replace TABLE GUI_TEST_ADVERITY_TEMPLATES (
	DATA_STREAM_TYPE_ID NUMBER(38,0),
	DATA_STREAM_TEMPLATE_ID NUMBER(38,0),
	DATA_STREAM_NAME VARCHAR(200),
	TEMPLATE VARCHAR(16777216),
	REASON_FOR_CHANGE VARCHAR(16777216),
	STATUS VARCHAR(16777216),
	UPDATED_TIMESTAMP TIMESTAMP_NTZ(9),
	VERSION NUMBER(38,0)
);
create or replace TABLE MAPPING_CLIENTENV (
	PROD_CORE_CLIENT_ID NUMBER(38,0),
	PROD_CORE_CLIENT_NAME VARCHAR(16777216),
	ENV_CORE_CLIENT_ID NUMBER(38,0),
	ENV_CORE_CLIENT_NAME VARCHAR(16777216)
);
create or replace TABLE MAPPING_CLIENTTYPE (
	CLIENT_ID NUMBER(38,0) NOT NULL,
	CLIENT_NAME VARCHAR(16777216) NOT NULL,
	TYPE_ID NUMBER(38,0) NOT NULL,
	SNOWFLAKE_ACCOUNT_ID VARCHAR(16777216)
);
create or replace TABLE MAPPING_CLIENT_DATASOURCE (
	CLIENT_ID NUMBER(38,0) NOT NULL,
	MARKET VARCHAR(255) NOT NULL,
	DATA_SOURCE_ID NUMBER(38,0) NOT NULL,
	ONBOARDING_ID VARCHAR(1024) NOT NULL,
	ONBOARDING_NAME VARCHAR(1024) NOT NULL,
	MAPPING_ID VARCHAR(1024) NOT NULL,
	MAPPING_NAME VARCHAR(1024) NOT NULL,
	REQUESTED_BY VARCHAR(255) NOT NULL,
	CREATED_TIMESTAMP TIMESTAMP_NTZ(9) NOT NULL,
	SERVICE_TYPE VARCHAR(255),
	CONNECTION_ID NUMBER(38,0),
	BILLING_OBJECT_ID NUMBER(38,0),
	VALIDATION_STATUS VARCHAR(255),
	VALIDATED_TIMESTAMP TIMESTAMP_NTZ(9),
	DATA_START_DATE DATE,
	DATA_ONBOARD_REQUESTED_TIMESTAMP TIMESTAMP_NTZ(9),
	DATA_ONBOARDED_TIMESTAMP TIMESTAMP_NTZ(9),
	UPDATED_BY VARCHAR(255),
	UPDATED_TIMESTAMP TIMESTAMP_NTZ(9),
	DATA_STREAM_ONBOARDIND_ID VARCHAR(255),
	AUTHORIZATION_ID NUMBER(38,0),
	ONBOARDING_ADVERITY_BILLING_OBJECT_ID VARCHAR(16777216),
	MAPPING_ADVERITY_BILLING_OBJECT_ID VARCHAR(16777216),
	ONBOARDED_TIMESTAMP TIMESTAMP_NTZ(9)
);
create or replace TABLE MAPPING_DATA (
	CLIENT_ID NUMBER(38,0),
	MARKET VARCHAR(16777216),
	DATA_SOURCE_ID NUMBER(38,0),
	ONBOARDING_ID VARCHAR(16777216),
	ONBOARDING_NAME VARCHAR(16777216),
	MAPPING_ID VARCHAR(16777216),
	MAPPING_NAME VARCHAR(16777216),
	STATUS_ID NUMBER(38,0),
	OVERRIDE_ACCURACY_THRESHOLD_IMPRESSIONS NUMBER(38,8),
	OVERRIDE_ACCURACY_THRESHOLD_CLICKS NUMBER(38,8),
	OVERRIDE_ACCURACY_THRESHOLD_COST NUMBER(38,8),
	AUTHORIZATION_ID NUMBER(38,0),
	ONBOARDING_ADVERITY_BILLING_OBJECT_ID VARCHAR(16777216),
	MAPPING_ADVERITY_BILLING_OBJECT_ID VARCHAR(16777216),
	REQUESTED_BY VARCHAR(255),
	CREATED_TIMESTAMP TIMESTAMP_NTZ(9),
	UPDATED_BY VARCHAR(255),
	UPDATED_TIMESTAMP TIMESTAMP_NTZ(9),
	BACKFILL_NOTIFICATION_EMAILS VARCHAR(16777216),
	FULL_MAPPING_ID VARCHAR(16777216),
	START_DATE DATE,
	END_DATE DATE,
	IMPRESSION_VARIANCE NUMBER(38,0) DEFAULT 1000,
	COST_VARIANCE NUMBER(38,0) DEFAULT 500
);
create or replace TABLE MAPPING_DATA_AUDIT_LOG (
	DATA_SOURCE_ID NUMBER(38,0) NOT NULL,
	ONBOARDING_ID VARCHAR(1024) NOT NULL,
	MAPPING_ID VARCHAR(1024) NOT NULL,
	FROM_STATUS NUMBER(38,0) NOT NULL,
	TO_STATUS NUMBER(38,0) NOT NULL,
	UPDATED_BY VARCHAR(1024),
	CREATED_TIMESTAMP TIMESTAMP_NTZ(9)
);
create or replace TABLE MAPPING_DATA_BCKUP (
	CLIENT_ID NUMBER(38,0),
	MARKET VARCHAR(16777216),
	DATA_SOURCE_ID NUMBER(38,0),
	ONBOARDING_ID VARCHAR(16777216),
	ONBOARDING_NAME VARCHAR(16777216),
	MAPPING_ID VARCHAR(16777216),
	MAPPING_NAME VARCHAR(16777216),
	STATUS_ID NUMBER(38,0),
	OVERRIDE_ACCURACY_THRESHOLD_IMPRESSIONS NUMBER(38,8),
	OVERRIDE_ACCURACY_THRESHOLD_CLICKS NUMBER(38,8),
	OVERRIDE_ACCURACY_THRESHOLD_COST NUMBER(38,8),
	AUTHORIZATION_ID NUMBER(38,0),
	ONBOARDING_ADVERITY_BILLING_OBJECT_ID VARCHAR(16777216),
	MAPPING_ADVERITY_BILLING_OBJECT_ID VARCHAR(16777216),
	REQUESTED_BY VARCHAR(255),
	CREATED_TIMESTAMP TIMESTAMP_NTZ(9),
	UPDATED_BY VARCHAR(255),
	UPDATED_TIMESTAMP TIMESTAMP_NTZ(9),
	BACKFILL_NOTIFICATION_EMAILS VARCHAR(16777216),
	FULL_MAPPING_ID VARCHAR(16777216),
	START_DATE DATE,
	END_DATE DATE
);
create or replace TABLE MAPPING_DATA_BCKUP1108 (
	CLIENT_ID NUMBER(38,0),
	MARKET VARCHAR(16777216),
	DATA_SOURCE_ID NUMBER(38,0),
	ONBOARDING_ID VARCHAR(16777216),
	ONBOARDING_NAME VARCHAR(16777216),
	MAPPING_ID VARCHAR(16777216),
	MAPPING_NAME VARCHAR(16777216),
	STATUS_ID NUMBER(38,0),
	OVERRIDE_ACCURACY_THRESHOLD_IMPRESSIONS NUMBER(38,8),
	OVERRIDE_ACCURACY_THRESHOLD_CLICKS NUMBER(38,8),
	OVERRIDE_ACCURACY_THRESHOLD_COST NUMBER(38,8),
	AUTHORIZATION_ID NUMBER(38,0),
	ONBOARDING_ADVERITY_BILLING_OBJECT_ID VARCHAR(16777216),
	MAPPING_ADVERITY_BILLING_OBJECT_ID VARCHAR(16777216),
	REQUESTED_BY VARCHAR(255),
	CREATED_TIMESTAMP TIMESTAMP_NTZ(9),
	UPDATED_BY VARCHAR(255),
	UPDATED_TIMESTAMP TIMESTAMP_NTZ(9),
	BACKFILL_NOTIFICATION_EMAILS VARCHAR(16777216),
	FULL_MAPPING_ID VARCHAR(16777216),
	START_DATE DATE,
	END_DATE DATE
);
create or replace TABLE MAPPING_DATA_NEW (
	CLIENT_ID NUMBER(38,0),
	MARKET VARCHAR(16777216),
	DATA_SOURCE_ID NUMBER(38,0),
	ONBOARDING_ID VARCHAR(16777216),
	ONBOARDING_NAME VARCHAR(16777216),
	MAPPING_ID VARCHAR(16777216),
	MAPPING_NAME VARCHAR(16777216),
	STATUS_ID NUMBER(38,0),
	OVERRIDE_ACCURACY_THRESHOLD_IMPRESSIONS NUMBER(38,8),
	OVERRIDE_ACCURACY_THRESHOLD_CLICKS NUMBER(38,8),
	OVERRIDE_ACCURACY_THRESHOLD_COST NUMBER(38,8),
	AUTHORIZATION_ID NUMBER(38,0),
	ONBOARDING_ADVERITY_BILLING_OBJECT_ID VARCHAR(16777216),
	MAPPING_ADVERITY_BILLING_OBJECT_ID VARCHAR(16777216),
	REQUESTED_BY VARCHAR(255),
	CREATED_TIMESTAMP TIMESTAMP_NTZ(9),
	UPDATED_BY VARCHAR(255),
	UPDATED_TIMESTAMP TIMESTAMP_NTZ(9),
	BACKFILL_NOTIFICATION_EMAILS VARCHAR(16777216)
);
create or replace TABLE MAPPING_DATA_OLD (
	CLIENT_ID NUMBER(38,0),
	MARKET VARCHAR(16777216),
	DATA_SOURCE_ID NUMBER(38,0),
	ONBOARDING_ID VARCHAR(16777216),
	ONBOARDING_NAME VARCHAR(16777216),
	MAPPING_ID VARCHAR(16777216),
	MAPPING_NAME VARCHAR(16777216),
	STATUS_ID NUMBER(38,0),
	OVERRIDE_ACCURACY_THRESHOLD_IMPRESSIONS NUMBER(38,8),
	OVERRIDE_ACCURACY_THRESHOLD_CLICKS NUMBER(38,8),
	OVERRIDE_ACCURACY_THRESHOLD_COST NUMBER(38,8),
	AUTHORIZATION_ID NUMBER(38,0),
	ONBOARDING_ADVERITY_BILLING_OBJECT_ID VARCHAR(16777216),
	MAPPING_ADVERITY_BILLING_OBJECT_ID VARCHAR(16777216),
	REQUESTED_BY VARCHAR(255),
	CREATED_TIMESTAMP TIMESTAMP_NTZ(9),
	UPDATED_BY VARCHAR(255),
	UPDATED_TIMESTAMP TIMESTAMP_NTZ(9),
	BACKFILL_NOTIFICATION_EMAILS VARCHAR(16777216),
	FULL_MAPPING_ID VARCHAR(16777216),
	START_DATE DATE,
	END_DATE DATE
);
create or replace TABLE MAPPING_SHARE (
	SHARE_ID NUMBER(38,0) NOT NULL,
	SNOWFLAKE_ACCOUNT_ID VARCHAR(16777216) NOT NULL,
	DATABASE_NAME VARCHAR(16777216)
);
create or replace TABLE META_DATE (
	DATE_ID VARCHAR(8),
	DATE DATE,
	WEEKDAY_NAME_SHORT VARCHAR(3),
	WEEKDAY_NAME_LONG VARCHAR(20),
	DAY_OF_WEEK NUMBER(1,0),
	IS_WEEKEND BOOLEAN,
	CALENDAR_WEEK_OF DATE,
	CALENDAR_WEEK_NUMBER NUMBER(2,0),
	CALENDAR_MONTH_NAME_SHORT VARCHAR(3),
	CALENDAR_MONTH_NAME_LONG VARCHAR(10),
	CALENDAR_MONTH_NUMBER NUMBER(2,0),
	CALENDAR_MONTH_START_DATE DATE,
	CALENDAR_MONTH_END_DATE DATE,
	CALENDAR_QUARTER_NAME VARCHAR(8),
	CALENDAR_QUARTER_NUMBER NUMBER(1,0),
	CALENDAR_QUARTER_START_DATE DATE,
	CALENDAR_QUARTER_END_DATE DATE,
	CALENDAR_YEAR_WEEK_NAME VARCHAR(10),
	CALENDAR_YEAR_WEEK_NUMBER NUMBER(6,0),
	CALENDAR_YEAR_MONTH_NAME VARCHAR(7),
	CALENDAR_YEAR_MONTH_NUMBER NUMBER(6,0),
	CALENDAR_YEAR_QUARTER_NAME VARCHAR(10),
	CALENDAR_YEAR_QUARTER_NUMBER NUMBER(6,0),
	CALENDAR_YEAR_NUMBER NUMBER(4,0),
	CALENDAR_YEAR_NAME VARCHAR(8),
	CALENDAR_YEAR_START_DATE DATE,
	CALENDAR_YEAR_END_DATE DATE,
	BROADCAST_WEEK_NUMBER NUMBER(2,0),
	BROADCAST_WEEK_START_DATE DATE,
	BROADCAST_WEEK_END_DATE DATE,
	BROADCAST_YEAR_WEEK_NAME VARCHAR(10),
	BROADCAST_YEAR_WEEK_NUMBER NUMBER(6,0),
	BROADCAST_MONTH_START_DATE DATE,
	BROADCAST_MONTH_END_DATE DATE,
	BROADCAST_MONTH_NUMBER NUMBER(2,0),
	BROADCAST_MONTH_NAME_LONG VARCHAR(10),
	BROADCAST_MONTH_NAME_SHORT VARCHAR(3),
	BROADCAST_YEAR_MONTH_NAME VARCHAR(7),
	BROADCAST_YEAR_MONTH_NUMBER NUMBER(6,0),
	BROADCAST_QUARTER_START_DATE DATE,
	BROADCAST_QUARTER_END_DATE DATE,
	BROADCAST_QUARTER_NUMBER NUMBER(6,0),
	BROADCAST_QUARTER_NAME VARCHAR(8),
	BROADCAST_YEAR_QUARTER_NAME VARCHAR(10),
	BROADCAST_YEAR_QUARTER_NUMBER NUMBER(6,0),
	BROADCAST_YEAR_START_DATE DATE,
	BROADCAST_YEAR_END_DATE DATE,
	BROADCAST_YEAR_NUMBER NUMBER(4,0)
);
create or replace TABLE TEST (
	TEST NUMBER(1,0)
);
create or replace view ACQUIRE_PLATFORM_MONITORING_EXPECTED_VIEW(
	CHECK_TYPE,
	STATUS,
	SOURCE_NAME,
	DATASET_NAME
) as
-- manually maintain checks
select t1.check_type, t1.status, t1.source_name, null as dataset_name
from platform_sit.config.acquire_platform_monitoring_expected t1
inner join PLATFORM_{{ENV}}.CONFIG.DP_DATASOURCE_VIEW t2
on t1.source_name = upper(t2.data_source_name)
where t2.status = 'Live'

union all

-- duplicate
select 'DUPLICATE' as check_type, 'ACTIVE' as status, upper(t2.data_source_name) as source_name, split_part(t1.parent_model_unique_id, 'model.dbt_dataplatform.', 2) as dataset_name
from ACQUIRE_{{ENV}}.TOOL_ELEMENTARY.DBT_TESTS t1
inner join PLATFORM_{{ENV}}.CONFIG.DP_DATASOURCE_VIEW t2
on upper(split_part(t1.schema_name, 'data_', 2)) = upper(t2.data_source_code)
where t1.short_name in ('unique', 'dim_compositekey_duplicatecheck')
and t2.status = 'Live'
;
create or replace secure view ADVERITY_DATA_STREAM_TYPES(
	DATA_STREAM_TYPE_ID,
	CONNECTION_TYPE_ID
) as
SELECT DATA_STREAM_TYPE_ID, CONNECTION_TYPE_ID
FROM PLATFORM_{{ENV}}.OPSAUTOMATION.ADVERITY_DATA_STREAM_TYPES;
create or replace view DBSYNC_TABLE_METADATA(
	TABLE_SCHEMA,
	BASE_NAME,
	STAGING_TABLE,
	STAGING_TABLE_COLUMNS,
	RAW_TABLE,
	RAW_TABLE_VERSION,
	RAW_TABLE_COLUMNS
) as
with base_table as (
    SELECT 
        t.table_catalog,
        t.table_schema,
        t.table_type,
        REGEXP_REPLACE(t.table_name, 'staging_|raw_|vw_raw_|_v(\\d+)$', '', 1, 0, 'i') AS base_name,
        COALESCE(REGEXP_SUBSTR(t.table_name, '_v(\\d+)$', 1, 1, 'i', 1)::NUMBER, 0) AS table_version,
        t.table_name,
        c.column_name,
        c.ordinal_position,
        c.data_type,
        COALESCE(c.character_maximum_length::VARCHAR, c.numeric_precision::VARCHAR || ',' || c.numeric_scale::VARCHAR, c.datetime_precision::VARCHAR) AS data_type_attrs
    FROM staging_{{ENV}}.information_schema.tables t
    JOIN staging_{{ENV}}.information_schema.columns c
    ON t.table_schema = c.table_schema AND t.table_name = c.table_name
    WHERE t.table_schema in (select distinct schema_name from PLATFORM_{{ENV}}.CONFIG.DP_DBYSNC_RAW_VC_SCHEMA) and t.table_type = 'BASE TABLE'
    UNION ALL
    SELECT 
        t.table_catalog,
        t.table_schema,
        t.table_type,
        REGEXP_REPLACE(t.table_name, 'staging_|raw_|vw_raw_|_v(\\d+)$', '', 1, 0, 'i') AS base_name,
        COALESCE(REGEXP_SUBSTR(t.table_name, '_v(\\d+)$', 1, 1, 'i', 1)::NUMBER, 0) AS table_version,
        t.table_name,
        c.column_name,
        c.ordinal_position,
        c.data_type,
        COALESCE(c.character_maximum_length::VARCHAR, c.numeric_precision::VARCHAR || ',' || c.numeric_scale::VARCHAR, c.datetime_precision::VARCHAR) AS data_type_attrs
    FROM raw_{{ENV}}.information_schema.tables t
    JOIN raw_{{ENV}}.information_schema.columns c
    ON t.table_schema = c.table_schema AND t.table_name = c.table_name
    WHERE t.table_schema in (select distinct schema_name from PLATFORM_{{ENV}}.CONFIG.DP_DBYSNC_RAW_VC_SCHEMA) and t.table_type = 'BASE TABLE'
),latest_version_base AS (
    SELECT
        table_catalog,
        table_schema,
        table_type,
        base_name,
        MAX(table_version) AS latest_version
    FROM base_table
    GROUP BY
        table_catalog,
        table_schema,
        table_type,
        base_name
),latest_version_info AS (
    SELECT
        bt.*
    FROM base_table bt
    JOIN latest_version_base lvb
        ON bt.table_catalog = lvb.table_catalog
        AND bt.table_schema = lvb.table_schema
        AND bt.table_type = lvb.table_type
        AND bt.base_name = lvb.base_name
        AND bt.table_version = lvb.latest_version
)
SELECT
    table_schema,
    base_name, 
    MAX(CASE WHEN table_catalog = 'staging_{{ENV}}' THEN table_name END) AS staging_table,
    LISTAGG(
        CASE 
            WHEN table_catalog = 'staging_{{ENV}}' AND data_type_attrs IS NULL THEN COLUMN_NAME || ' ' || data_type
            WHEN table_catalog = 'staging_{{ENV}}' AND data_type_attrs IS NOT NULL THEN COLUMN_NAME || ' ' || data_type || '(' || data_type_attrs || ')' 
        END, ', ')
            WITHIN GROUP (ORDER BY CASE WHEN table_catalog = 'staging_{{ENV}}' THEN ordinal_position END ASC NULLS LAST) AS staging_table_columns,
    MAX(CASE WHEN table_catalog = 'raw_{{ENV}}' THEN table_name END) AS raw_table,
    MAX(CASE WHEN table_catalog = 'raw_{{ENV}}' THEN table_version END) AS raw_table_version,
    LISTAGG(
        CASE 
            WHEN table_catalog = 'raw_{{ENV}}' AND data_type_attrs IS NULL THEN COLUMN_NAME || ' ' || data_type
            WHEN table_catalog = 'raw_{{ENV}}' AND data_type_attrs IS NOT NULL THEN COLUMN_NAME || ' ' || data_type || '(' || data_type_attrs || ')' 
        END, ', ')
            WITHIN GROUP (ORDER BY CASE WHEN table_catalog = 'raw_{{ENV}}' THEN ordinal_position END ASC NULLS LAST) AS raw_table_columns
FROM latest_version_info
GROUP BY table_schema, base_name
ORDER BY base_name;
create or replace secure view DP_CLIENT_VIEW(
	CORE_CLIENT_ID,
	CORE_CLIENT_NAME,
	ENV_CORE_CLIENT_ID,
	ENV_CORE_CLIENT_NAME,
	CORE_CLIENT_UUID,
	DP_CLIENT_CODE,
	DP_CLIENT_TYPE,
	DP_MARKET_CODE,
	DP_MARKET_NAME,
	CORE_MARKET_CODE,
	CORE_MARKET_NAME,
	CORE_MARKET_REGION_CODE,
	CORE_MARKET_REGION_NAME,
	CORE_MARKET_TIMEZONE,
	CORE_MARKET_OFFSET,
	CORE_MARKET_CURRENCY_CODE,
	CORE_MARKET_CURRENCY_NAME,
	PRIMARY_ACCOUNT_ID,
	PRIMARY_ACCOUNT_NAME,
	PRIMARY_ACCOUNT_TYPE,
	PRIMARY_ACCOUNT_REGION,
	PRIMARY_ACCOUNT_DESCRIPTION,
	PRIMARY_ACCOUNT_URL,
	PRIMARY_ACCOUNT_MARKET,
	PRIMARY_DMC_DATABASE,
	PRIMARY_REPORTING_DATABASE,
	PRIMARY_DMC_SCHEMA,
	SECONDARY_ACCOUNT_ID,
	SECONDARY_ACCOUNT_NAME,
	SECONDARY_ACCOUNT_TYPE,
	SECONDARY_ACCOUNT_REGION,
	SECONDARY_ACCOUNT_DESCRIPTION,
	SECONDARY_ACCOUNT_URL,
	SECONDARY_ACCOUNT_MARKET,
	SECONDARY_DMC_DATABASE,
	SECONDARY_REPORTING_DATABASE,
	DBROLE_CLIENT,
	DBROLE_ACCOUNT,
	DBROLE_INTERNAL,
	SHARE_REPORTING,
	SHARE_DMC
) as
SELECT 
ecv.core_client_id as core_client_id, ecv.core_client_name,clen.env_core_client_id, clen.env_core_client_name, ecv.core_client_uuid, ecd.client_code as DP_client_code,
ct.name as DP_client_type,COALESCE(ct.dp_market, ecv.market_code) as DP_MARKET_code, COALESCE(ct.dp_market, ecv.market_name) as DP_MARKET_Name,
ecv.market_code as core_market_code, ecv.market_name as core_market_name,
emv.region_code as core_market_region_code, emv.region_name as core_market_region_name, emv.timezone as core_market_timezone, emv.offset as core_market_offset, emv.currency_code as core_market_currency_code, emv.currency_name as core_market_currency_name,
psa.id as primary_account_id, psa.name as primary_account_name, pact.name as primary_account_type, psa.region as primary_account_region, psa.description as primary_account_description, psa.url as primary_account_url, psa.market as primary_account_market,
'REPORTINGAPPS_'||SPLIT_PART(current_database(),'_',2) as primary_dmc_database, case when core_client_name ilike 'Universal Demo Client' then 'CONSUME_DEMO'||case when SPLIT_PART(current_database(),'_',2) <> 'PROD' then '_'||SPLIT_PART(current_database(),'_',2) else '' end else 'CONSUME_'||SPLIT_PART(current_database(),'_',2) end as primary_reporting_database,UPPER('DMC_'||DP_MARKET_code||'_'||client_code) as primary_dmc_schema,
sa.id as secondary_account_id, sa.name as secondary_account_name, act.name as secondary_account_type, sa.region as secondary_account_region, sa.description as secondary_account_description, sa.url as secondary_account_url, sa.market as secondary_account_market,
'DATAMGMT_CONSOLE' ||case when SPLIT_PART(current_database(),'_',2) <> 'PROD' then '_'||SPLIT_PART(current_database(),'_',2) else '' end as secondary_dmc_database, 
'DATAMGMT_REPORTING'|| case when core_client_name ilike 'Universal Demo Client' then '_DEMO'||case when SPLIT_PART(current_database(),'_',2) <> 'PROD' then '_'||SPLIT_PART(current_database(),'_',2) else '' end else case when SPLIT_PART(current_database(),'_',2) <> 'PROD' then '_'||SPLIT_PART(current_database(),'_',2) else '' end end as secondary_reporting_database,
UPPER('DBROLE_'||secondary_account_type||'_'||DP_MARKET_code||'_'||DP_client_code) as dbrole_client, 
UPPER(case when ct.id =3 or core_client_name ilike 'Universal Demo Client' then null else 'DBROLE_'||secondary_account_type||'_'||DP_MARKET_code||'_ALL' end) as dbrole_account,
UPPER('DBROLE_INTERNAL_GLOBAL_ALL') as dbrole_internal, 
UPPER('SHARE_'||secondary_account_type||'_'||DP_MARKET_code||'_'|| case when ct.id =3 then DP_client_code else 'ALL' end ||'_'||primary_reporting_database) as share_reporting,
UPPER('SHARE_'||secondary_account_type||'_'||DP_MARKET_code||'_'|| case when ct.id =3 then DP_client_code else 'ALL' end ||'_'||primary_dmc_database) as share_dmc,
from CONFIG.ENTITY_CLIENTMARKET ecv 
left join config.MAPPING_CLIENTENV clen on ecv.core_client_id = clen.prod_core_client_id
join config.entity_clientcode ecd on ecv.core_client_id=ecd.client_id
left join config.mapping_clienttype mct on ecv.core_client_id=mct.client_id
join config.entity_type ct on COALESCE(mct.type_id,1)=ct.id
join config.entity_market_view emv on ecv.market_code=emv.iso_code
join config.entity_snowflakeaccount psa on psa.type_id=4
join config.entity_type pact on psa.type_id=pact.id
join config.entity_snowflakeaccount sa on case when mct.snowflake_account_id is null then true else mct.snowflake_account_id =sa.id end and COALESCE(ct.dp_market, ecv.market_code)=sa.market and sa.isactive and sa.type_id=case when ct.id=1 then 5 else ct.id end
join config.entity_type act on sa.type_id=act.id and act.id<>4
;
create or replace secure view DP_CLIENT_VIEW_TEST(
	CORE_CLIENT_ID,
	CORE_CLIENT_NAME,
	ENV_CORE_CLIENT_ID,
	ENV_CORE_CLIENT_NAME,
	CORE_CLIENT_UUID,
	DP_CLIENT_CODE,
	DP_CLIENT_TYPE,
	DP_MARKET_CODE,
	DP_MARKET_NAME,
	CORE_MARKET_CODE,
	CORE_MARKET_NAME,
	CORE_MARKET_REGION_CODE,
	CORE_MARKET_REGION_NAME,
	CORE_MARKET_TIMEZONE,
	CORE_MARKET_OFFSET,
	CORE_MARKET_CURRENCY_CODE,
	CORE_MARKET_CURRENCY_NAME,
	PRIMARY_ACCOUNT_ID,
	PRIMARY_ACCOUNT_NAME,
	PRIMARY_ACCOUNT_TYPE,
	PRIMARY_ACCOUNT_REGION,
	PRIMARY_ACCOUNT_DESCRIPTION,
	PRIMARY_ACCOUNT_URL,
	PRIMARY_ACCOUNT_MARKET,
	PRIMARY_DMC_DATABASE,
	PRIMARY_REPORTING_DATABASE,
	PRIMARY_DMC_SCHEMA,
	SECONDARY_ACCOUNT_ID,
	SECONDARY_ACCOUNT_NAME,
	SECONDARY_ACCOUNT_TYPE,
	SECONDARY_ACCOUNT_REGION,
	SECONDARY_ACCOUNT_DESCRIPTION,
	SECONDARY_ACCOUNT_URL,
	SECONDARY_ACCOUNT_MARKET,
	SECONDARY_DMC_DATABASE,
	SECONDARY_REPORTING_DATABASE,
	DBROLE_CLIENT,
	DBROLE_ACCOUNT,
	DBROLE_INTERNAL,
	SHARE_REPORTING,
	SHARE_DMC
) as
SELECT 
ecv.core_client_id as core_client_id, ecv.core_client_name,clen.env_core_client_id, clen.env_core_client_name, ecv.core_client_uuid, ecd.client_code as DP_client_code,
ct.name as DP_client_type,COALESCE(ct.dp_market, ecv.market_code) as DP_MARKET_code, COALESCE(ct.dp_market, ecv.market_name) as DP_MARKET_Name,
ecv.market_code as core_market_code, ecv.market_name as core_market_name,
emv.region_code as core_market_region_code, emv.region_name as core_market_region_name, emv.timezone as core_market_timezone, emv.offset as core_market_offset, emv.currency_code as core_market_currency_code, emv.currency_name as core_market_currency_name,
psa.id as primary_account_id, psa.name as primary_account_name, pact.name as primary_account_type, psa.region as primary_account_region, psa.description as primary_account_description, psa.url as primary_account_url, psa.market as primary_account_market,
'REPORTINGAPPS_'||SPLIT_PART(current_database(),'_',2) as primary_dmc_database, case when core_client_name ilike 'Universal Demo Client' then 'CONSUME_DEMO'||case when SPLIT_PART(current_database(),'_',2) <> 'PROD' then '_'||SPLIT_PART(current_database(),'_',2) else '' end else 'CONSUME_'||SPLIT_PART(current_database(),'_',2) end as primary_reporting_database,UPPER('DMC_'||DP_MARKET_code||'_'||client_code) as primary_dmc_schema,
sa.id as secondary_account_id, sa.name as secondary_account_name, act.name as secondary_account_type, sa.region as secondary_account_region, sa.description as secondary_account_description, sa.url as secondary_account_url, sa.market as secondary_account_market,
'DATAMGMT_CONSOLE' ||case when SPLIT_PART(current_database(),'_',2) <> 'PROD' then '_'||SPLIT_PART(current_database(),'_',2) else '' end as secondary_dmc_database, 
'DATAMGMT_REPORTING'|| case when core_client_name ilike 'Universal Demo Client' then '_DEMO'||case when SPLIT_PART(current_database(),'_',2) <> 'PROD' then '_'||SPLIT_PART(current_database(),'_',2) else '' end else case when SPLIT_PART(current_database(),'_',2) <> 'PROD' then '_'||SPLIT_PART(current_database(),'_',2) else '' end end as secondary_reporting_database,
UPPER('DBROLE_'||secondary_account_type||'_'||DP_MARKET_code||'_'||DP_client_code) as dbrole_client, 
UPPER(case when ct.id =3 or core_client_name ilike 'Universal Demo Client' then null else 'DBROLE_'||secondary_account_type||'_'||DP_MARKET_code||'_ALL' end) as dbrole_account,
UPPER('DBROLE_INTERNAL_GLOBAL_ALL') as dbrole_internal, 
UPPER('SHARE_'||secondary_account_type||'_'||DP_MARKET_code||'_'|| case when ct.id =3 then DP_client_code else 'ALL' end ||'_'||primary_reporting_database) as share_reporting,
UPPER('SHARE_'||secondary_account_type||'_'||DP_MARKET_code||'_'|| case when ct.id =3 then DP_client_code else 'ALL' end ||'_'||primary_dmc_database) as share_dmc,
from CONFIG.ENTITY_CLIENTMARKET ecv 
left join config.MAPPING_CLIENTENV clen on ecv.core_client_id = clen.prod_core_client_id
join config.entity_clientcode ecd on ecv.core_client_id=ecd.client_id
left join config.mapping_clienttype mct on ecv.core_client_id=mct.client_id
join config.entity_type ct on COALESCE(mct.type_id,1)=ct.id
join config.entity_market_view emv on ecv.market_code=emv.iso_code
join config.entity_snowflakeaccount psa on psa.type_id=4
join config.entity_type pact on psa.type_id=pact.id
join config.entity_snowflakeaccount sa on case when mct.snowflake_account_id is null then true else mct.snowflake_account_id =sa.id end and COALESCE(ct.dp_market, ecv.market_code)=sa.market and sa.isactive and sa.type_id=case when ct.id=1 then 2 else ct.id end
join config.entity_type act on sa.type_id=act.id and act.id<>4
;
create or replace secure view DP_DATASOURCE_VIEW(
	DATA_SOURCE_ID,
	DESCRIPTION,
	DATA_SOURCE_NAME,
	DATA_SOURCE_CODE,
	DATA_SOURCE_SCHEMA,
	DATA_SOURCE_CATEGORY,
	STATUS,
	CLIENT_MAPPING_COLUMN,
	ONBOARDING_COLUMN,
	INTEGRATION_METHOD,
	LOOKBACK_PERIOD
) as
SELECT
ds.id as data_source_id, ds.description , ds.name as data_source_name,ds.short_name as data_source_code, ds.schema as data_source_schema, 
dsc.name as data_source_category, st.name as status, ds.client_mapping_column, ds.onboarding_column,
im.name as integration_method, ds.lookback_period
from PLATFORM_{{ENV}}.config.dp_datasource ds
join PLATFORM_{{ENV}}.config.entity_datasourcecategory dsc on ds.category_id=dsc.id
join PLATFORM_{{ENV}}.config.entity_status st on ds.status_id=st.id
join PLATFORM_{{ENV}}.config.entity_integrationmethod im on ds.integration_method_id=im.id
;
create or replace view DP_DIMENSIONMAPPING_TESTING_WITH_INHERITED_DATES(
	ID,
	DATA_SOURCE_ID,
	DATABASE_NAME,
	SCHEMA_NAME,
	TABLE_NAME,
	SOURCE_DIMENSION_NAME,
	DP_DIMENSION_NAME,
	DIMENSION_COLUMN_ID,
	DIMENSION_COLUMN_NAME,
	ORIGINAL_START_DATE,
	ISTAXONOMY,
	ORIGINAL_END_DATE,
	PARENT_DIMENSION_ID,
	INHERIT_DATES_FROM_PARENT,
	DIMENSION_HIERARCHY_LEVEL,
	EFFECTIVE_START_DATE,
	EFFECTIVE_END_DATE,
	DATE_SOURCE,
	INHERITANCE_PATH,
	INHERITANCE_DEPTH
) as
WITH RECURSIVE dimension_hierarchy AS (
  -- Caso base: dimensiones con fechas explícitas o que no heredan
  SELECT 
    dm.ID,
    dm.DATA_SOURCE_ID,
    dm.DATABASE_NAME,
    dm.SCHEMA_NAME,
    dm.TABLE_NAME,
    dm.SOURCE_DIMENSION_NAME,
    dm.DP_DIMENSION_NAME,
    dm.DIMENSION_COLUMN_ID,
    dm.DIMENSION_COLUMN_NAME,
    dm.DIMENSION_COLUMN_START_DATE,
    dm.ISTAXONOMY,
    dm.DIMENSION_COLUMN_END_DATE,
    dm.PARENT_DIMENSION_ID,
    dm.INHERIT_DATES_FROM_PARENT,
    dm.DIMENSION_HIERARCHY_LEVEL,
    -- Fechas resueltas (comenzar con fechas explícitas o null)
    dm.DIMENSION_COLUMN_START_DATE AS RESOLVED_START_DATE,
    dm.DIMENSION_COLUMN_END_DATE AS RESOLVED_END_DATE,
    -- Rastrear camino de herencia para debug
    CAST(dm.ID AS VARCHAR) AS INHERITANCE_PATH,
    0 AS INHERITANCE_DEPTH
  FROM CONFIG.DP_DIMENSIONMAPPING_TESTING dm
  WHERE dm.PARENT_DIMENSION_ID IS NULL 
     OR dm.INHERIT_DATES_FROM_PARENT = FALSE
  
  UNION ALL
  
  -- Caso recursivo: heredar fechas del padre - CONDICIÓN CORREGIDA
  SELECT 
    child.ID,
    child.DATA_SOURCE_ID,
    child.DATABASE_NAME,
    child.SCHEMA_NAME,
    child.TABLE_NAME,
    child.SOURCE_DIMENSION_NAME,
    child.DP_DIMENSION_NAME,
    child.DIMENSION_COLUMN_ID,
    child.DIMENSION_COLUMN_NAME,
    child.DIMENSION_COLUMN_START_DATE,
    child.ISTAXONOMY,
    child.DIMENSION_COLUMN_END_DATE,
    child.PARENT_DIMENSION_ID,
    child.INHERIT_DATES_FROM_PARENT,
    child.DIMENSION_HIERARCHY_LEVEL,
    -- Heredar fechas del padre si el hijo no las tiene
    CASE 
      WHEN child.DIMENSION_COLUMN_START_DATE IS NOT NULL THEN child.DIMENSION_COLUMN_START_DATE
      WHEN child.INHERIT_DATES_FROM_PARENT = TRUE THEN parent.RESOLVED_START_DATE
      ELSE NULL
    END AS RESOLVED_START_DATE,
    CASE 
      WHEN child.DIMENSION_COLUMN_END_DATE IS NOT NULL THEN child.DIMENSION_COLUMN_END_DATE
      WHEN child.INHERIT_DATES_FROM_PARENT = TRUE THEN parent.RESOLVED_END_DATE
      ELSE NULL
    END AS RESOLVED_END_DATE,
    -- Actualizar camino de herencia
    parent.INHERITANCE_PATH || ' -> ' || child.ID AS INHERITANCE_PATH,
    parent.INHERITANCE_DEPTH + 1 AS INHERITANCE_DEPTH
  FROM CONFIG.DP_DIMENSIONMAPPING_TESTING child
  INNER JOIN dimension_hierarchy parent ON child.PARENT_DIMENSION_ID = parent.ID
  WHERE child.INHERIT_DATES_FROM_PARENT = TRUE
    AND parent.INHERITANCE_DEPTH < 5  -- Prevenir recursión infinita
    -- CONDICIÓN CORREGIDA: Incluir TODOS los hijos con padres, no solo los que necesitan fechas
)
SELECT 
  ID,
  DATA_SOURCE_ID,
  DATABASE_NAME,
  SCHEMA_NAME,
  TABLE_NAME,
  SOURCE_DIMENSION_NAME,
  DP_DIMENSION_NAME,
  DIMENSION_COLUMN_ID,
  DIMENSION_COLUMN_NAME,
  DIMENSION_COLUMN_START_DATE AS ORIGINAL_START_DATE,
  ISTAXONOMY,
  DIMENSION_COLUMN_END_DATE AS ORIGINAL_END_DATE,
  PARENT_DIMENSION_ID,
  INHERIT_DATES_FROM_PARENT,
  DIMENSION_HIERARCHY_LEVEL,
  RESOLVED_START_DATE AS EFFECTIVE_START_DATE,
  RESOLVED_END_DATE AS EFFECTIVE_END_DATE,
  CASE 
    WHEN DIMENSION_COLUMN_START_DATE IS NOT NULL AND DIMENSION_COLUMN_END_DATE IS NOT NULL THEN 'EXPLICIT'
    WHEN RESOLVED_START_DATE IS NOT NULL OR RESOLVED_END_DATE IS NOT NULL THEN 'INHERITED'
    ELSE 'NO_DATES'
  END AS DATE_SOURCE,
  INHERITANCE_PATH,
  INHERITANCE_DEPTH
FROM dimension_hierarchy
ORDER BY DATA_SOURCE_ID, DIMENSION_HIERARCHY_LEVEL, SOURCE_DIMENSION_NAME;
create or replace view DP_DIMENSIONMAPPING_TESTING_WITH_INHERITED_DATES_2(
	ID,
	DATA_SOURCE_ID,
	DATABASE_NAME,
	SCHEMA_NAME,
	TABLE_NAME,
	SOURCE_DIMENSION_NAME,
	DP_DIMENSION_NAME,
	DIMENSION_COLUMN_ID,
	DIMENSION_COLUMN_NAME,
	ORIGINAL_START_DATE,
	ISTAXONOMY,
	ORIGINAL_END_DATE,
	PARENT_DIMENSION_ID,
	INHERIT_DATES_FROM_PARENT,
	DIMENSION_HIERARCHY_LEVEL,
	EFFECTIVE_START_DATE,
	EFFECTIVE_END_DATE,
	DATE_SOURCE,
	INHERITANCE_PATH,
	INHERITANCE_DEPTH
) as
WITH RECURSIVE dimension_hierarchy AS (
  SELECT
    dm.ID, dm.DATA_SOURCE_ID, dm.DATABASE_NAME, dm.SCHEMA_NAME, dm.TABLE_NAME,
    dm.SOURCE_DIMENSION_NAME, dm.DP_DIMENSION_NAME, dm.DIMENSION_COLUMN_ID,
    dm.DIMENSION_COLUMN_NAME, dm.DIMENSION_COLUMN_START_DATE, dm.ISTAXONOMY,
    dm.DIMENSION_COLUMN_END_DATE, dm.PARENT_DIMENSION_ID,
    dm.INHERIT_DATES_FROM_PARENT, dm.DIMENSION_HIERARCHY_LEVEL,
    dm.DIMENSION_COLUMN_START_DATE AS RESOLVED_START_DATE,
    dm.DIMENSION_COLUMN_END_DATE   AS RESOLVED_END_DATE,
    CAST(dm.ID AS VARCHAR) AS INHERITANCE_PATH,
    0 AS INHERITANCE_DEPTH
  FROM CONFIG.DP_DIMENSIONMAPPING_TESTING dm
  WHERE dm.PARENT_DIMENSION_ID IS NULL
     OR dm.INHERIT_DATES_FROM_PARENT = FALSE
     OR dm.DIMENSION_COLUMN_START_DATE IS NOT NULL
     OR dm.DIMENSION_COLUMN_END_DATE   IS NOT NULL

  UNION ALL

  SELECT
    child.ID, child.DATA_SOURCE_ID, child.DATABASE_NAME, child.SCHEMA_NAME, child.TABLE_NAME,
    child.SOURCE_DIMENSION_NAME, child.DP_DIMENSION_NAME, child.DIMENSION_COLUMN_ID,
    child.DIMENSION_COLUMN_NAME, child.DIMENSION_COLUMN_START_DATE, child.ISTAXONOMY,
    child.DIMENSION_COLUMN_END_DATE, child.PARENT_DIMENSION_ID,
    child.INHERIT_DATES_FROM_PARENT, child.DIMENSION_HIERARCHY_LEVEL,
    COALESCE(child.DIMENSION_COLUMN_START_DATE, parent.RESOLVED_START_DATE) AS RESOLVED_START_DATE,
    COALESCE(child.DIMENSION_COLUMN_END_DATE,   parent.RESOLVED_END_DATE)   AS RESOLVED_END_DATE,
    parent.INHERITANCE_PATH || ' -> ' || child.ID AS INHERITANCE_PATH,
    parent.INHERITANCE_DEPTH + 1 AS INHERITANCE_DEPTH
  FROM CONFIG.DP_DIMENSIONMAPPING_TESTING child
  JOIN dimension_hierarchy parent ON child.PARENT_DIMENSION_ID = parent.ID
  WHERE child.INHERIT_DATES_FROM_PARENT = TRUE
    AND parent.INHERITANCE_DEPTH < 5
)
SELECT
  ID, DATA_SOURCE_ID, DATABASE_NAME, SCHEMA_NAME, TABLE_NAME,
  SOURCE_DIMENSION_NAME, DP_DIMENSION_NAME, DIMENSION_COLUMN_ID, DIMENSION_COLUMN_NAME,
  DIMENSION_COLUMN_START_DATE AS ORIGINAL_START_DATE, ISTAXONOMY,
  DIMENSION_COLUMN_END_DATE   AS ORIGINAL_END_DATE, PARENT_DIMENSION_ID,
  INHERIT_DATES_FROM_PARENT, DIMENSION_HIERARCHY_LEVEL,
  RESOLVED_START_DATE AS EFFECTIVE_START_DATE,
  RESOLVED_END_DATE   AS EFFECTIVE_END_DATE,
  CASE
    WHEN DIMENSION_COLUMN_START_DATE IS NOT NULL OR DIMENSION_COLUMN_END_DATE IS NOT NULL THEN 'EXPLICIT'
    WHEN RESOLVED_START_DATE IS NOT NULL OR RESOLVED_END_DATE IS NOT NULL THEN 'INHERITED'
    ELSE 'NO_DATES'
  END AS DATE_SOURCE,
  INHERITANCE_PATH, INHERITANCE_DEPTH
FROM dimension_hierarchy
QUALIFY ROW_NUMBER() OVER (
  PARTITION BY ID
  ORDER BY
    CASE WHEN DIMENSION_COLUMN_START_DATE IS NOT NULL OR DIMENSION_COLUMN_END_DATE IS NOT NULL THEN 1 ELSE 2 END,
    INHERITANCE_DEPTH DESC
) = 1;
create or replace secure view DP_MAPPINGDATA_VIEW(
	CORE_CLIENT_ID,
	CORE_CLIENT_NAME,
	CORE_MARKET,
	DATA_SOURCE_ID,
	DATA_SOURCE_NAME,
	ONBOARDING_COLUMN,
	ONBOARDING_ID,
	ONBOARDING_NAME,
	MAPPING_COLUMN,
	MAPPING_ID,
	MAPPING_NAME,
	STATUS_ID,
	STATUS,
	ACCURACY_THRESHOLD_IMPRESSIONS,
	ACCURACY_THRESHOLD_CLICKS,
	ACCURACY_THRESHOLD_COST,
	IMPRESSION_VARIANCE,
	COST_VARIANCE,
	REQUESTED_BY,
	REQUESTED_TIMESTAMP,
	UPDATED_BY,
	UPDATED_TIMESTAMP,
	START_DATE,
	END_DATE
) as
SELECT
    core_client_id, core_client_name, market_code as core_market, ds.id as data_source_id, ds.name as data_source_name,ds.onboarding_column,
   regexp_replace(onboarding_id,'^(Act_)','',1,0,'i') onboarding_id, onboarding_name,ds.client_mapping_column as mapping_column,  regexp_replace(mapping_id,'^(Act_)','',1,0,'i') mapping_id, mapping_name as mapping_name,S.id as status_id, s.name as status, COALESCE(a.OVERRIDE_ACCURACY_THRESHOLD_IMPRESSIONS,dq.accuracy_threshold_impressions) ACCURACY_THRESHOLD_IMPRESSIONS,
COALESCE(a.OVERRIDE_ACCURACY_THRESHOLD_CLICKS,dq.accuracy_threshold_clicks) as ACCURACY_THRESHOLD_CLICKS, 
COALESCE(a.OVERRIDE_ACCURACY_THRESHOLD_COST,dq.ACCURACY_THRESHOLD_COST) as ACCURACY_THRESHOLD_COST,
a.IMPRESSION_VARIANCE,
a.COST_VARIANCE,
 requested_by, created_timestamp as requested_timestamp,  updated_by,  updated_timestamp, start_date, end_date
FROM  PLATFORM_{{ENV}}.config.mapping_data a
join PLATFORM_{{ENV}}.config.dp_datasource ds on a.data_source_id=ds.id
join PLATFORM_{{ENV}}.config.dp_quality dq on ds.id=dq.data_source_id
join PLATFORM_{{ENV}}.config.entity_status s on s.id=a.status_id and s.id in (3,4)
join PLATFORM_{{ENV}}.config.entity_clientmarket c on a.client_id=c.core_client_id::varchar and a.market=c.market_code
union all
SELECT
    core_client_id, core_client_name, market_code as core_market, ds.id as data_source_id, ds.name as data_source_name,ds.onboarding_column,
   regexp_replace(onboarding_id,'^(Act_)','',1,0,'i') onboarding_id, onboarding_name,ds.client_mapping_column as mapping_column,  regexp_replace(ad_account_id,'^(Act_)','',1,0,'i') mapping_id, ad_account_name as mapping_name,S.id as status_id, s.name as status, COALESCE(a.ACCURACY_THRESHOLD_IMPRESSIONS,dq.accuracy_threshold_impressions) ACCURACY_THRESHOLD_IMPRESSIONS,
COALESCE(a.ACCURACY_THRESHOLD_CLICKS,dq.accuracy_threshold_clicks) as ACCURACY_THRESHOLD_CLICKS, 
COALESCE(a.ACCURACY_THRESHOLD_COST,dq.ACCURACY_THRESHOLD_COST) as ACCURACY_THRESHOLD_COST,
null as IMPRESSION_VARIANCE,
null as COST_VARIANCE,
null as requested_by, null as requested_timestamp, null as updated_by, null as updated_timestamp, null as start_date, null as end_date
FROM 
(SELECT a.* 
FROM ACQUIRE_{{ENV}}.DATA_DATAMANAGER.DM_DQF_CONFIG_COMPLETENESS_ACCURACY a
left join PLATFORM_{{ENV}}.config.mapping_data b on regexp_replace(ad_account_id,'^(Act_)','',1,0,'i')=b.mapping_id
where mie_client_id<>'UNMAPPED' and b.mapping_id is null)  a
join PLATFORM_{{ENV}}.config.dp_datasource ds on a.data_source_name=ds.name
join PLATFORM_{{ENV}}.config.dp_quality dq on ds.id=dq.data_source_id
join PLATFORM_{{ENV}}.config.entity_status s on s.id=3 --need to handle when switch to mapping_data table
join PLATFORM_{{ENV}}.config.entity_clientmarket c on a.mie_client_id=c.core_client_id::varchar and a.mie_market=c.market_code
;
create or replace secure view DP_SHARE_VIEW(
	SHARE_ID,
	SHARE_NAME,
	SHARE_DATABASE_NAME,
	SHARE_TYPE_ID,
	SHARE_TYPE,
	SHARE_PURPOSE_ID,
	SHARE_PURPOSE,
	SHARE_DESCRIPTION,
	SECONDARY_ACCOUNT_ID,
	SECONDARY_ACCOUNT_DATABASE
) as
SELECT es.id as share_id, es.name as share_name,es.database_name as share_database_name, es.share_type_id, est.name as share_type,es.share_purpose_id, esp.name as share_purpose, es.description as share_description,
 ms.snowflake_account_id as secondary_account_id, ms.database_name as secondary_account_database
from PLATFORM_{{ENV}}.config.entity_share es
join PLATFORM_{{ENV}}.config.entity_sharetype est on es.share_type_id=est.id
join PLATFORM_{{ENV}}.config.entity_sharepurpose esp on es.share_purpose_id=esp.id
join PLATFORM_{{ENV}}.config.mapping_share ms on es.id=ms.share_id;
create or replace secure view DP_TAXONOMYDIMENSION(
	ID,
	DATA_SOURCE_ID,
	DATABASE_NAME,
	SCHEMA_NAME,
	TABLE_NAME,
	SOURCE_FIELD_NAME,
	DP_FIELD_NAME,
	DIMENSION_COLUMN_ID,
	DIMENSION_COLUMN_NAME,
	DIMENSION_COLUMN_START_DATE
) as 
select t.id, d.data_source_id, d.database_name, d.schema_name, d.table_name, d.source_field_name, d.dp_field_name
, t.DIMENSION_COLUMN_ID, t.DIMENSION_COLUMN_NAME, t.DIMENSION_COLUMN_START_DATE 
from config.mapping_taxonomydimension t
join config.dp_dimensionmapping d on t.DIMENSION_MAPPING_ID = d.id
;
create or replace secure view ENTITY_CLIENTMARKET(
	CORE_CLIENT_ID,
	CORE_CLIENT_NAME,
	CORE_CLIENT_UUID,
	MARKET_CODE,
	MARKET_NAME
) as
SELECT ecv.core_client_id, ecv.core_client_name, ecv.core_client_uuid, emv.iso_code as market_code, emv.name as market_name
from PLATFORM_{{ENV}}.config.entity_client_view ecv, table(flatten(markets)) m
join platform_sit.config.entity_market_view emv on m.value::varchar = emv.iso_code;
create or replace secure view ENTITY_CLIENT_VIEW(
	CORE_CLIENT_ID,
	CORE_CLIENT_NAME,
	CORE_CLIENT_UUID,
	AGENCIES,
	MARKETS
) as
SELECT client_id as core_client_id, client_name as core_client_name, client_uuid as core_client_uuid, 
agencies, markets
from PLATFORM_{{ENV}}.config.entity_client;
create or replace secure view ENTITY_MARKET_VIEW(
	ISO_CODE,
	NAME,
	TIMEZONE,
	OFFSET,
	REGION_CODE,
	REGION_NAME,
	CURRENCY_CODE,
	CURRENCY_NAME
) as
SELECT ISO_CODE,
	NAME,
	TIMEZONE,
	OFFSET,
	REGION_CODE,
	REGION_NAME,
	CURRENCY_CODE,
	CURRENCY_NAME
from PLATFORM_{{ENV}}.CONFIG.ENTITY_MARKET;
create or replace secure view ENTITY_USER(
	EMAIL,
	USERNAME,
	FIRST_NAME,
	LAST_NAME,
	MARKETS,
	MARKETS_ACCESS_MODE,
	CLIENTS,
	CLIENTS_ACCESS_MODE,
	ROLES
) as
select lower(email) email, username, initcap(first_name) first_name, initcap(last_name)last_name,
array_agg(distinct m.value['isoCode']) within group (order by m.value['isoCode']) as markets,
case when markets ilike '%ALL%' then 'ALL' else 'SOME' end as MARKETS_ACCESS_MODE, clients, CLIENTS_ACCESS_MODE, roles
from CORE_{{ENV}}.PUBLIC.USERS_VIEW c,
TABLE(FLATTEN(parse_json(markets))) m
--where email ilike any ('ashish.gupta@kinesso.com','dana.behan@kinesso.com','abhijeet.bongarde@kinesso.com')
group by all;
create or replace secure view ENTITY_USERCLIENT_VIEW(
	EMAIL,
	USERNAME,
	FIRST_NAME,
	LAST_NAME,
	ROLES,
	CORE_CLIENT_ID,
	CORE_CLIENT_NAME,
	DP_CLIENT_CODE,
	DP_CLIENT_TYPE,
	CORE_MARKET_CODE,
	CORE_MARKET_NAME
) as
select  email, username, first_name, last_name,roles, cm.core_client_id,  cm.core_client_name,ecd.client_code as DP_client_code,ct.name as dp_client_type,
cm.market_code as CORE_MARKET_CODE,cm.market_name as CORE_MARKET_NAME
from (SELECT  u.*,m.value['id'] as client_id FROM PLATFORM_{{ENV}}.CONFIG.ENTITY_USER u, TABLE(FLATTEN(parse_json(clients), outer => true)) m) u
join PLATFORM_{{ENV}}.CONFIG.ENTITY_CLIENTMARKET cm on case when u.clients_access_mode='ALL' then true else cm.core_client_id= u.client_id end and case when u.markets_access_mode='ALL' then true else array_contains(cm.market_code::variant , markets) end
left join PLATFORM_{{ENV}}.config.mapping_clienttype mct on cm.core_client_id=mct.client_id
join PLATFORM_{{ENV}}.config.entity_type ct on COALESCE(mct.type_id,1)=ct.id
left join PLATFORM_{{ENV}}.config.entity_clientcode ecd on cm.core_client_id=ecd.client_id
group by all;
create or replace secure view MAPPING_ADVERITY_DATA_SOURCE(
	SETUP_DATA_SOURCE_ID,
	ADVERITY_DATA_STREAM_TYPE_ID,
	MAPPING_BILLING_OBJECT_FIELD,
	MAPPING_DATA_STREAM_FIELD,
	MAPPING_CLIENT_LOOKUP_COL,
	WORKSPACE_ID,
	WORKSPACE_NAME
) as
select SETUP_DATA_SOURCE_ID ,
	ADVERITY_DATA_STREAM_TYPE_ID ,
    MAPPING_BILLING_OBJECT_FIELD,
    MAPPING_DATA_STREAM_FIELD,
    MAPPING_CLIENT_LOOKUP_COL,
    WORKSPACE_ID,
    WORKSPACE_NAME from PLATFORM_{{ENV}}.OPSAUTOMATION.MAPPING_ADVERITY_DATA_SOURCE;
create or replace view POC_DBSYNC_TABLE_METADATA(
	TABLE_SCHEMA,
	BASE_NAME,
	STAGING_TABLE,
	STAGING_TABLE_COLUMNS,
	RAW_TABLE,
	RAW_TABLE_VERSION,
	RAW_TABLE_COLUMNS
) as
WITH base_table AS (
    SELECT
        t.table_catalog,
        t.table_schema, 
        t.table_type,
        REGEXP_REPLACE(t.table_name, 'staging_|raw_|vw_raw_|_v(\\d+)$', '', 1, 0, 'i') AS base_name,
        COALESCE(REGEXP_SUBSTR(t.table_name, '_v(\\d+)$', 1, 1, 'i', 1)::NUMBER, 0) AS table_version,
        t.table_name,
        c.column_name,
        c.ordinal_position, 
        CASE
          WHEN COALESCE(CHARACTER_MAXIMUM_LENGTH, CHARACTER_OCTET_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, DATETIME_PRECISION) IS NOT NULL
          THEN c.data_type || '(' || COALESCE(CHARACTER_MAXIMUM_LENGTH, CHARACTER_OCTET_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, DATETIME_PRECISION) || ')'
          ELSE c.data_type
        END AS data_type_definition 
    FROM staging_{{ENV}}.information_schema.tables AS t
    JOIN staging_{{ENV}}.information_schema.columns AS c
        ON t.table_catalog = c.table_catalog 
        AND t.table_schema = c.table_schema  
        AND t.table_name = c.table_name      
    WHERE t.table_schema in (select distinct schema_name from PLATFORM_{{ENV}}.CONFIG.DP_DBYSNC_RAW_VC_SCHEMA) AND t.table_type ='BASE TABLE'
    UNION ALL
    SELECT
        t.table_catalog,
        t.table_schema, 
        t.table_type,
        REGEXP_REPLACE(t.table_name, 'staging_|raw_|vw_raw_|_v(\\d+)$', '', 1, 0, 'i') AS base_name,
        COALESCE(REGEXP_SUBSTR(t.table_name, '_v(\\d+)$', 1, 1, 'i', 1)::NUMBER, 0) AS table_version,
        t.table_name,
        c.column_name,
        c.ordinal_position, 
         
        CASE
          WHEN COALESCE(CHARACTER_MAXIMUM_LENGTH, CHARACTER_OCTET_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, DATETIME_PRECISION) IS NOT NULL
          THEN c.data_type || '(' || COALESCE(CHARACTER_MAXIMUM_LENGTH, CHARACTER_OCTET_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, DATETIME_PRECISION) || ')'
          ELSE c.data_type
        END AS data_type_definition 
    FROM raw_{{ENV}}.information_schema.tables AS t
    JOIN raw_{{ENV}}.information_schema.columns AS c
         ON t.table_catalog = c.table_catalog 
        AND t.table_schema = c.table_schema   
        AND t.table_name = c.table_name       
    WHERE t.table_schema in (select distinct schema_name from PLATFORM_{{ENV}}.CONFIG.DP_DBYSNC_RAW_VC_SCHEMA) AND t.table_type ='BASE TABLE'
),
latest_version_base AS (
    
    SELECT
        table_catalog,
        table_schema,
        table_type,
        base_name,
        MAX(table_version) AS latest_version
    FROM base_table
    GROUP BY
        table_catalog,
        table_schema,
        table_type,
        base_name
),
latest_version_info AS (
    
    SELECT
        bt.*
    FROM base_table bt
    JOIN latest_version_base lvb
        ON bt.table_catalog = lvb.table_catalog
        AND bt.table_schema = lvb.table_schema
        AND bt.table_type = lvb.table_type
        AND bt.base_name = lvb.base_name
        AND bt.table_version = lvb.latest_version
)
SELECT
    table_schema,
    base_name,
    MAX(CASE WHEN table_catalog = 'staging_{{ENV}}' THEN table_name END) AS staging_table,
    LISTAGG(CASE WHEN table_catalog = 'staging_{{ENV}}' THEN COLUMN_NAME || ' ' || data_type_definition END, ', ')
        WITHIN GROUP (ORDER BY CASE WHEN table_catalog = 'staging_{{ENV}}' THEN ordinal_position END ASC NULLS LAST) AS staging_table_columns,
    MAX(CASE WHEN table_catalog = 'raw_{{ENV}}' THEN table_name END) AS raw_table,
    MAX(CASE WHEN table_catalog = 'raw_{{ENV}}' THEN table_version END) AS raw_table_version,
    LISTAGG(CASE WHEN table_catalog = 'raw_{{ENV}}' THEN COLUMN_NAME || ' ' || data_type_definition END, ', ')
        WITHIN GROUP (ORDER BY CASE WHEN table_catalog = 'raw_{{ENV}}' THEN ordinal_position END ASC NULLS LAST) AS raw_table_columns
FROM latest_version_info
GROUP BY table_schema,base_name
ORDER BY base_name;
create or replace view TAXONOMY_CONFIG_DATA(
	CORE_CLIENT_ID,
	PIPELINE_TYPE,
	DIMENSION_NAME,
	TAXONOMY_MAPPING_METHOD,
	DATA_SOURCE_CODE,
	DATA_SOURCE_NAME,
	ADVERTISER_ID,
	START_DATE,
	END_DATE,
	TAXONOMY_FORMULA_ID,
	REPORTING_SCHEMA
) as
select distinct mt.core_client_id ,pt.name as pipeline_type, etd.dimension_name,TAXONOMY_MAPPING_method,  dsv.data_source_code, dsv.data_source_name, advertiser_id, start_date, end_date,taxonomy_formula_id, reporting_schema
from REPORTINGPIPELINE.MAPPING_TAXONOMY mt
join reportingpipeline.dp_pipelines pd on mt.core_client_id = pd.client_id
join REPORTINGPIPELINE.ENTITY_TAXONOMYDIMENSION etd on mt.TAXONOMY_DIMENSION_id=etd.id
join reportingpipeline.entity_pipelinetype pt on etd.pipelinetype_id=pt.id
left join config.dp_datasource_view dsv on mt.data_source_id=dsv.data_source_id;
create or replace view TEST_DBSYNC_TABLE_METADATA(
	TABLE_SCHEMA,
	BASE_NAME,
	STAGING_TABLE,
	STAGING_TABLE_COLUMNS,
	RAW_TABLE,
	RAW_TABLE_VERSION,
	RAW_TABLE_COLUMNS
) as
with all_table_metadata as (
    SELECT
        t.table_catalog,
        t.table_schema,
        t.table_type,
        REGEXP_REPLACE(t.table_name, 'staging_|raw_|vw_raw_|_v(\\d+)$', '', 1, 0, 'i') AS base_name,
        COALESCE(REGEXP_SUBSTR(t.table_name, '_v(\\d+)$', 1, 1, 'i', 1)::NUMBER, 0) AS table_version,
        t.table_name,
        c.column_name,
        c.ordinal_position,
        c.data_type,
        COALESCE(c.character_maximum_length::VARCHAR, c.numeric_precision::VARCHAR || ',' || c.numeric_scale::VARCHAR, c.datetime_precision::VARCHAR) AS data_type_attrs
    FROM staging_{{ENV}}.information_schema.tables t
    JOIN staging_{{ENV}}.information_schema.columns c
        ON t.table_schema = c.table_schema AND t.table_name = c.table_name
    WHERE t.table_schema IN (select distinct schema_name from PLATFORM_{{ENV}}.CONFIG.DP_DBYSNC_RAW_VC_SCHEMA)
      AND t.table_type = 'BASE TABLE'

    UNION ALL

    SELECT
        t.table_catalog,
        t.table_schema,
        t.table_type,
        REGEXP_REPLACE(t.table_name, 'staging_|raw_|vw_raw_|_v(\\d+)$', '', 1, 0, 'i') AS base_name,
        COALESCE(REGEXP_SUBSTR(t.table_name, '_v(\\d+)$', 1, 1, 'i', 1)::NUMBER, 0) AS table_version,
        t.table_name,
        c.column_name,
        c.ordinal_position,
        c.data_type,
        COALESCE(c.character_maximum_length::VARCHAR, c.numeric_precision::VARCHAR || ',' || c.numeric_scale::VARCHAR, c.datetime_precision::VARCHAR) AS data_type_attrs
    FROM raw_{{ENV}}.information_schema.tables t
    JOIN raw_{{ENV}}.information_schema.columns c
        ON t.table_schema = c.table_schema AND t.table_name = c.table_name
    WHERE t.table_schema IN (select distinct schema_name from PLATFORM_{{ENV}}.CONFIG.DP_DBYSNC_RAW_VC_SCHEMA)
      AND t.table_type = 'BASE TABLE'
)
SELECT
    table_schema,
    base_name,
    MAX(CASE WHEN table_catalog = 'staging_{{ENV}}' THEN table_name END) AS staging_table,
    LISTAGG(
        CASE
            WHEN table_catalog = 'staging_{{ENV}}' AND data_type_attrs IS NULL THEN COLUMN_NAME || ' ' || data_type
            WHEN table_catalog = 'staging_{{ENV}}' AND data_type_attrs IS NOT NULL THEN COLUMN_NAME || ' ' || data_type || '(' || data_type_attrs || ')'
        END, ', ')
            WITHIN GROUP (ORDER BY CASE WHEN table_catalog = 'staging_{{ENV}}' THEN ordinal_position END ASC NULLS LAST) AS staging_table_columns,
    MAX(CASE WHEN table_catalog = 'raw_{{ENV}}' THEN table_name END) AS raw_table,
    MAX(CASE WHEN table_catalog = 'raw_{{ENV}}' THEN table_version END) AS raw_table_version,
    LISTAGG(
        CASE
            WHEN table_catalog = 'raw_{{ENV}}' AND data_type_attrs IS NULL THEN COLUMN_NAME || ' ' || data_type
            WHEN table_catalog = 'raw_{{ENV}}' AND data_type_attrs IS NOT NULL THEN COLUMN_NAME || ' ' || data_type || '(' || data_type_attrs || ')'
        END, ', ')
            WITHIN GROUP (ORDER BY CASE WHEN table_catalog = 'raw_{{ENV}}' THEN ordinal_position END ASC NULLS LAST) AS raw_table_columns
FROM all_table_metadata
GROUP BY table_schema, base_name
ORDER BY base_name;
create or replace view TEST_VIEW(
	TEST
) as select 1 as test;
create or replace view USER_CLIENT_DMC(
	EMAIL,
	USERNAME,
	FIRST_NAME,
	LAST_NAME,
	ROLES,
	CORE_CLIENT_ID,
	CORE_CLIENT_NAME,
	DP_CLIENT_CODE,
	DP_CLIENT_TYPE,
	CORE_MARKET_CODE,
	CORE_MARKET_NAME
) as
SELECT  euv.*
FROM CONFIG.ENTITY_USERCLIENT_VIEW euv,
    LATERAL FLATTEN(input => euv.roles) f
WHERE
    UPPER(f.value:name::STRING) = 'DMC CONFIG ADMIN';
create or replace secure view VIEW_CURRENCY_RATES(
	DATE,
	COUNTRY,
	CURRENCY,
	CURRENCY_CODE,
	INCOMING_RATE,
	RATE,
	FILE_NAME,
	TIMESTAMP
) COMMENT='IPG approved currency rates by Month'
 as(
select  date,
country, currency, EPM_ACCOUNT_CODE as currency_code, TO_DECIMAL(INCOME_STATEMENT_RATES,20,9) as incoming_rate, TO_DECIMAL(BALANCE_SHEET_RATES,20,9) as rate,file_name, timestamp
from (SELECT ADD_MONTHS(to_date(concat(split_part(file_name,' ',1),split_part(file_name,' ',2)),'MON yyyy'),1) as date, dense_rank()
  over (partition by date order by TIMESTAMP desc) as rn, * from ACQUIRE_{{ENV}}.DATA_DATAMANAGER.DM_MONTHLY_CURRENCY_RATES where BALANCE_SHEET_RATES not like '%N/A%') where rn=1
union
select distinct calendar_month_start_date, 'United States','United State Dollar','USD','1','1','meta_date',current_timestamp()
from PLATFORM_{{ENV}}.CONFIG.META_DATE where CALENDAR_YEAR_NUMBER>=2019);