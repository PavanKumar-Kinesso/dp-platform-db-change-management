-- FINAL VERSION: ReportingApps Schema
-- Generated at: 2025-08-28T14:19:31.023488
-- Note: No templating decisions were made - using raw extraction
-- ⚠️  This version may contain environment-specific references

-- Exported from PLATFORM_SIT at 20250828141723
-- Environment references templated for multi-environment deployment
-- NOTE: Only current database references are templated, cross-database references remain as-is
create or replace TABLE DATA_DICTIONARY (
	TABLE_NAME VARCHAR(16777216),
	COLUMN_NAME VARCHAR(16777216),
	COLUMN_TYPE VARCHAR(16777216),
	DATA_TYPE VARCHAR(16777216),
	CURRENCY_SOURCE VARCHAR(16777216),
	DATA_CATEGORY VARCHAR(16777216),
	DATA_SUB_CATEGORY VARCHAR(16777216),
	FORMULA_EXPRESSION VARCHAR(16777216),
	DESCRIPTION VARCHAR(16777216),
	SOURCE_TABLE_NAME VARCHAR(16777216),
	SOURCE_COLUMN_NAME VARCHAR(16777216),
	SOURCE_FORMULA_EXPRESSION VARCHAR(16777216)
);
create or replace TABLE DMC_CLIENT_MOCKED (
	CORE_CLIENT_ID NUMBER(38,0),
	CORE_CLIENT_NAME VARCHAR(16777216),
	CORE_CLIENT_UUID VARCHAR(16777216),
	DP_CLIENT_CODE VARCHAR(16777216),
	DP_CLIENT_TYPE VARCHAR(16777216),
	DP_MARKET_CODE VARCHAR(16777216),
	CORE_MARKET_CODE VARCHAR(16777216),
	PRIMARY_ACCOUNT_ID VARCHAR(16777216),
	PRIMARY_ACCOUNT_NAME VARCHAR(16777216),
	PRIMARY_ACCOUNT_REGION VARCHAR(16777216),
	PRIMARY_ACCOUNT_URL VARCHAR(16777216),
	PRIMARY_ACCOUNT_DATABASE VARCHAR(16777216),
	PRIMARY_ACCOUNT_SCHEMA VARCHAR(16777216),
	SECONDARY_ACCOUNT_ID VARCHAR(16777216),
	SECONDARY_ACCOUNT_NAME VARCHAR(16777216),
	SECONDARY_ACCOUNT_REGION VARCHAR(16777216),
	SECONDARY_ACCOUNT_URL VARCHAR(16777216),
	SECONDARY_ACCOUNT_DATABASE VARCHAR(16777216),
	SECONDARY_ACCOUNT_SCHEMA VARCHAR(16777216)
);
create or replace TABLE MAPPING_CUSTOMSCHEMA (
	CLIENT_ID NUMBER(38,0) NOT NULL,
	MARKET VARCHAR(16777216) NOT NULL,
	SNOWFLAKE_ACCOUNT_ID VARCHAR(16777216) NOT NULL,
	DATABASE_NAME VARCHAR(16777216) NOT NULL,
	SCHEMA_NAME VARCHAR(16777216) NOT NULL
);
create or replace TABLE MIGRATION_SCHEMA_MAPPING (
	CLIENT_ID NUMBER(38,0) NOT NULL,
	CLIENT_NAME VARCHAR(16777216) NOT NULL,
	SOURCE_SNOWFLAKE_ACCOUNT VARCHAR(16777216) NOT NULL,
	SOURCE_DATABASE VARCHAR(16777216) NOT NULL,
	SOURCE_SCHEMA VARCHAR(16777216) NOT NULL,
	SHARED_DATABASE VARCHAR(16777216) NOT NULL,
	PRIMARY_DATABASE VARCHAR(16777216) NOT NULL,
	PRIMARY_SCHEMA VARCHAR(16777216) NOT NULL
);
create or replace secure view DMC_CLIENT(
	CORE_CLIENT_ID,
	CORE_CLIENT_NAME,
	CORE_CLIENT_UUID,
	DP_CLIENT_CODE,
	DP_CLIENT_TYPE,
	DP_MARKET_CODE,
	CORE_MARKET_CODE,
	PRIMARY_ACCOUNT_ID,
	PRIMARY_ACCOUNT_NAME,
	PRIMARY_ACCOUNT_REGION,
	PRIMARY_ACCOUNT_URL,
	PRIMARY_ACCOUNT_DATABASE,
	PRIMARY_ACCOUNT_SCHEMA,
	SECONDARY_ACCOUNT_ID,
	SECONDARY_ACCOUNT_NAME,
	SECONDARY_ACCOUNT_REGION,
	SECONDARY_ACCOUNT_URL,
	SECONDARY_ACCOUNT_DATABASE,
	SECONDARY_ACCOUNT_SCHEMA,
	IS_DEFAULT_SCHEMA,
	CATEGORY
) as
	SELECT
		ENV_CORE_CLIENT_ID AS CORE_CLIENT_ID,
		ENV_CORE_CLIENT_NAME AS CORE_CLIENT_NAME,
		CORE_CLIENT_UUID,
		DP_CLIENT_CODE,
		DP_CLIENT_TYPE,
		DP_MARKET_CODE,
		CORE_MARKET_CODE,
		PRIMARY_ACCOUNT_ID,
		PRIMARY_ACCOUNT_NAME,
		PRIMARY_ACCOUNT_REGION,
		PRIMARY_ACCOUNT_URL,
		PRIMARY_DMC_DATABASE AS PRIMARY_ACCOUNT_DATABASE,
		PRIMARY_DMC_SCHEMA AS PRIMARY_ACCOUNT_SCHEMA,
		SECONDARY_ACCOUNT_ID,
		SECONDARY_ACCOUNT_NAME,
		SECONDARY_ACCOUNT_REGION,
		SECONDARY_ACCOUNT_URL,
		SECONDARY_DMC_DATABASE AS SECONDARY_ACCOUNT_DATABASE,
		PRIMARY_DMC_SCHEMA AS SECONDARY_ACCOUNT_SCHEMA,
		TRUE AS IS_DEFAULT_SCHEMA,
		'ReportingApps' AS CATEGORY        
	FROM CONFIG.DP_CLIENT_VIEW CV
	WHERE ENV_CORE_CLIENT_ID IS NOT NULL
UNION ALL
	SELECT
		ENV_CORE_CLIENT_ID,
		ENV_CORE_CLIENT_NAME,
		CORE_CLIENT_UUID,
		DP_CLIENT_CODE,
		DP_CLIENT_TYPE,
		DP_MARKET_CODE,
		CORE_MARKET_CODE,
		PRIMARY_ACCOUNT_ID,
		PRIMARY_ACCOUNT_NAME,
		PRIMARY_ACCOUNT_REGION,
		PRIMARY_ACCOUNT_URL,
		PRIMARY_DMC_DATABASE AS PRIMARY_ACCOUNT_DATABASE,
		CASE
			WHEN CUSTOM.SNOWFLAKE_ACCOUNT_ID = CV.PRIMARY_ACCOUNT_ID THEN CUSTOM.SCHEMA_NAME
			ELSE PRIMARY_DMC_SCHEMA
		END AS PRIMARY_ACCOUNT_SCHEMA,
		SECONDARY_ACCOUNT_ID,
		SECONDARY_ACCOUNT_NAME,
		SECONDARY_ACCOUNT_REGION,
		SECONDARY_ACCOUNT_URL,
		CASE
			WHEN CUSTOM.SNOWFLAKE_ACCOUNT_ID = CV.SECONDARY_ACCOUNT_ID THEN CUSTOM.DATABASE_NAME
			ELSE SECONDARY_DMC_DATABASE
		END AS SECONDARY_ACCOUNT_DATABASE,
		CASE
			WHEN CUSTOM.SNOWFLAKE_ACCOUNT_ID = CV.PRIMARY_ACCOUNT_ID THEN CUSTOM.SCHEMA_NAME
			ELSE CUSTOM.SCHEMA_NAME
		END AS SECONDARY_ACCOUNT_SCHEMA,
		FALSE AS IS_DEFAULT_SCHEMA,
		'ReportingApps' AS CATEGORY      
	FROM CONFIG.DP_CLIENT_VIEW CV
	JOIN REPORTINGAPPS.MAPPING_CUSTOMSCHEMA CUSTOM ON CUSTOM.CLIENT_ID = CV.CORE_CLIENT_ID
		AND CUSTOM.MARKET = CV.CORE_MARKET_CODE
		AND (CUSTOM.SNOWFLAKE_ACCOUNT_ID = CV.PRIMARY_ACCOUNT_ID
			OR CUSTOM.SNOWFLAKE_ACCOUNT_ID = CV.SECONDARY_ACCOUNT_ID)
	WHERE ENV_CORE_CLIENT_ID IS NOT NULL
UNION ALL
	SELECT
		ENV_CORE_CLIENT_ID,
		ENV_CORE_CLIENT_NAME,
		CORE_CLIENT_UUID,
		DP_CLIENT_CODE,
		DP_CLIENT_TYPE,
		DP_MARKET_CODE,
		CORE_MARKET_CODE,
		PRIMARY_ACCOUNT_ID,
		PRIMARY_ACCOUNT_NAME,
		PRIMARY_ACCOUNT_REGION,
		PRIMARY_ACCOUNT_URL,
		PRIMARY_REPORTING_DATABASE AS PRIMARY_ACCOUNT_DATABASE,
		REPORTING_SCHEMA AS PRIMARY_ACCOUNT_SCHEMA,
		SECONDARY_ACCOUNT_ID,
		SECONDARY_ACCOUNT_NAME,
		SECONDARY_ACCOUNT_REGION,
		SECONDARY_ACCOUNT_URL,
		SECONDARY_REPORTING_DATABASE AS SECONDARY_ACCOUNT_DATABASE,
		REPORTING_SCHEMA AS SECONDARY_ACCOUNT_SCHEMA,
		TRUE AS IS_DEFAULT_SCHEMA,
		'Reporting' AS CATEGORY   
	FROM REPORTINGPIPELINE.DP_PIPELINES PIPELINE
	JOIN REPORTINGPIPELINE.MAPPING_MARKET MKT ON PIPELINE.PIPELINE_ID = MKT.PIPELINE_ID
	JOIN CONFIG.DP_CLIENT_VIEW DP ON PIPELINE.CLIENT_ID = DP.CORE_CLIENT_ID
		AND MARKET = DP.CORE_MARKET_CODE
	WHERE ENV_CORE_CLIENT_ID IS NOT NULL
UNION ALL
SELECT
	ENV_CORE_CLIENT_ID,
	ENV_CORE_CLIENT_NAME,
	CORE_CLIENT_UUID,
	DP_CLIENT_CODE,
	DP_CLIENT_TYPE,
	DP_MARKET_CODE,
	CORE_MARKET_CODE,
	PRIMARY_ACCOUNT_ID,
	PRIMARY_ACCOUNT_NAME,
	PRIMARY_ACCOUNT_REGION,
	PRIMARY_ACCOUNT_URL,
	PRIMARY_REPORTING_DATABASE AS PRIMARY_ACCOUNT_DATABASE,
	'RD_GLOBAL_UDC_ALL' AS PRIMARY_ACCOUNT_SCHEMA,
	SECONDARY_ACCOUNT_ID,
	SECONDARY_ACCOUNT_NAME,
	SECONDARY_ACCOUNT_REGION,
	SECONDARY_ACCOUNT_URL,
	SECONDARY_REPORTING_DATABASE AS SECONDARY_ACCOUNT_DATABASE,
	'RD_GLOBAL_UDC_ALL' AS SECONDARY_ACCOUNT_SCHEMA,
	TRUE AS IS_DEFAULT_SCHEMA,
	'UDC' AS CATEGORY    
FROM CONFIG.DP_CLIENT_VIEW DP
WHERE CORE_CLIENT_NAME ILIKE 'Universal Demo Client'
	AND ENV_CORE_CLIENT_ID IS NOT NULL;
create or replace secure view DMC_DATASOURCE(
	CORE_CLIENT_ID,
	CORE_CLIENT_NAME,
	DATA_SOURCE_NAME,
	DATA_SOURCE_CATEGORY,
	CORE_MARKET,
	STATUS,
	INTEGRATION_METHOD,
	LOOKBACK_PERIOD,
	RETRIEVAL_CADENCE,
	EXPECTED_SCHEDULED_TIME,
	TIMEZONE,
	REGION
) as
SELECT  distinct dc.env_core_client_id   AS core_client_id,
       dc.env_core_client_name AS core_client_name,
       md.data_source_name,
       ds.data_source_category,
       md.core_market,
       ds.status,
       ds.integration_method,
       ds.lookback_period,
       'Daily'               AS retrieval_cadence,
       '6AM'                 AS expected_scheduled_time,
       m.dp_default_timezone AS timezone,
       m.dp_region_code      AS region
FROM   platform_{{ENV}}.config.dp_mappingdata_view md
JOIN   platform_{{ENV}}.config.dp_client_view dc
	ON     md.core_client_id=dc.core_client_id and md.core_market=dc.core_market_code
JOIN   platform_{{ENV}}.config.dp_datasource_view ds
	ON     md.data_source_id=ds.data_source_id
JOIN   platform_{{ENV}}.config.dp_market m
ON     md.core_market=m.core_iso_code
WHERE  ds.status='Live' AND dc.env_core_client_id is not null
UNION ALL
SELECT distinct dc.env_core_client_id   AS core_client_id,
       dc.env_core_client_name AS core_client_name,
       ds.data_source_name,
       ds.data_source_category,
       m.core_iso_code AS core_market,
       ds.status,
       ds.integration_method,
       ds.lookback_period,
       'One-Time only'       AS retrieval_cadence,
       'Not Applicable'      AS expected_scheduled_time,
       m.dp_default_timezone AS timezone,
       m.dp_region_code      AS region
FROM   platform_{{ENV}}.config.dp_client_view dc
JOIN   platform_{{ENV}}.config.dp_datasource_view ds
JOIN   platform_{{ENV}}.config.dp_market m
	ON     dc.core_market_code=m.core_iso_code
WHERE  dc.core_client_name ilike 'Universal Demo Client'
AND    ds.status='Live';
create or replace secure view DMC_RD_MAPPING(
	CORE_CLIENT_ID,
	CORE_MARKET,
	SECONDARY_DATABASE_NAME,
	SECONDARY_SCHEMA_NAME,
	TABLE_NAME,
	FIELD_NAME,
	ISCUSTOM,
	DATA_TYPE,
	COLUMN_TYPE,
	CATEGORY,
	SUBCATEGORY,
	CURRENCY_SOURCE,
	FORMULA_EXPRESSION,
	DESCRIPTION
) as
select 
  mie_client_id as core_client_id
, split(mie_market,',') as core_market
, dc.secondary_reporting_database as Secondary_Database_Name
, i.table_schema as Secondary_Schema_name
, i.table_name as Table_Name
, i.column_name as Field_name
, case when d.column_name is null then True else False end as ISCUSTOM
, case when ISCUSTOM then 
        case 
         when i.data_type in ('NUMBER','FLOAT')  then 'NUMBER' 
         when i.data_type in ('DATE','TIMESTAMP_NTZ','TIMESTAMP_LTZ') then 'DATE'
         else 'TEXT'
        end  else d.data_type end as data_type
, case when ISCUSTOM then 
        case 
         when i.data_type in ('NUMBER','FLOAT')  then 'METRIC' 
         else 'DIMENSION' 
        end 
    else d.column_type 
    end as column_type
, case when ISCUSTOM then 'CUSTOM' else d.data_category end as category
, case when ISCUSTOM then 'CUSTOM' else d.data_sub_category end as subcategory
, currency_source
, case when ISCUSTOM then 
        case 
        when i.data_type in ('NUMBER','FLOAT')  then concat('SUM(', i.column_name ,')') 
        else i.column_name 
        end
    else formula_expression end as formula_expression
, d.description
from consume_{{ENV}}.information_schema.columns i
left join PLATFORM_{{ENV}}.reportingapps.data_dictionary d on i.table_name=d.table_name 
and i.column_name = d.column_name
join PLATFORM_{{ENV}}.reportingpipeline.pipeline_config p on i.table_schema=p.reporting_schema
join (SELECT distinct core_client_id, secondary_dmc_database, secondary_reporting_database FROM PLATFORM_{{ENV}}.config.dp_client_view) dc on p.mie_client_id=dc.core_client_id
where  i.table_name not ilike '%REPORTING%' ;